#!/bin/zsh
autoload colors
colors

APP=$0
K8S="std"

usage() {
  echo -e
  echo -e "Usage: $APP [options]"
  echo -e
  echo -e "Deploys Taktzeit on the selected Kubernetes cluster. Three types are supported:"
  echo -e "  * AWS EKS (eks)"
  echo -e "  * Azure AKS (aks)"
  echo -e "  * Standard (std)"
  echo -e
  echo -e "Defaults to a standard (local) Kubernetes cluster deployment if no type is chosen"
  echo -e
  echo -e "Options:"
  echo -e "  -t | --type <aks|eks|std> If empty, defaults to std"
  echo -e "  -h | --help displays usage information"
  echo -e
  exit 1
}

progress-bar() { # progress-bar: A very nice shell progress bar by https://github.com/edouard-lopez
  local duration=${1}
  already_done() { for ((done=0; done<$elapsed; done++)); do printf "â–‡"; done }
  remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
  percentage() { printf "| %s%%" $(( (($elapsed)*100)/($duration)*100/100 )); }
  clean_line() { printf "\r"; }

  for (( elapsed=1; elapsed<=$duration; elapsed++ )); do
    already_done; remaining; percentage
    sleep 1
    clean_line
  done
  clean_line
}

while [[ $# -gt 0 ]]
do
  case $1 in
    -t|--type)
      K8S="$2"
      shift
      shift;;
    -h|--help)
      usage;;
    *)
      echo -e "$fg_bold[red]Invalid option: $fg_bold[yellow]$1$reset_color"
      usage;;
  esac
done

if [[ $K8S != "aks" ]] && [[ $K8S != "eks" ]] && [[ $K8S != "std" ]]
then
  echo -e "$fg_bold[red]Invalid option: $fg_bold[yellow]$K8S$reset_color"
  echo -e "$fg_bold[yellow]Valid choices are one of $fg_bold[green]aks$fg_bold[yellow], $fg_bold[green]eks$fg_bold[yellow] or $fg_bold[green]std$reset_color"
  usage
fi

echo -e "\n$fg_bold[red]Creating taktzeit namespace$reset_color"
kubectl apply -f taktzeit-namespace.yml
kubectl label namespace taktzeit istio-injection=enabled
echo -e "\n$fg_bold[red]Deploying Secrets$reset_color"
kubectl apply -f secrets-vault.yml
echo -e "\n$fg_bold[red]Deploying RabbitMQ$reset_color"
kubectl apply -f rabbitmq-cluster-ip.yml -f rabbitmq-deployment.yml

echo -e "\n$fg_bold[red]Deploying Redis$reset_color"
if [[ $K8S == "aks" ]]
then
  kubectl apply -f redis-cluster-ip.yml -f aks-redis-deployment.yml
else
  kubectl apply -f redis-cluster-ip.yml -f redis-deployment.yml
fi

echo -e "\n$fg_bold[red]Creating Peristent Volume Claim $reset_color"
if [[ $K8S == "eks" ]]
then
  kubectl apply -f eks-database-pvc.yml
else
  kubectl apply -f database-pvc.yml
fi

echo -e "\n$fg_bold[red]Deploying Postgres$reset_color"
kubectl apply -f postgres-cluster-ip.yml -f postgres-deployment.yml
echo -e "\n$fg_bold[red]Sleeping 60 sec to allow for system stabilization$reset_color"
progress-bar 60

echo -e "\n$fg_bold[yellow]Deploy WORKER horizontal pod autoscaler? (y/n)$reset_color"
read -r ANSWER
if [[ $ANSWER = "y" ]]
then
  echo -e "\n$fg_bold[red]Deploying WORKER horizontal pod autoscaler $reset_color"
  kubectl apply -f worker-hpa.yml
fi

echo -e "\n$fg_bold[red]Deploying WORKER service$reset_color"
kubectl apply -f worker-deployment.yml
echo -e "\n$fg_bold[red]Deploying API service$reset_color"
kubectl apply -f api-cluster-ip.yml -f api-deployment.yml
echo -e "\n$fg_bold[red]Deploying CLIENT service$reset_color"
kubectl apply -f client-cluster-ip.yml -f client-deployment.yml

echo -e "\n$fg_bold[red]Deploying Ingress service$reset_color"
if [[ $K8S == "aks" ]]
then
  kubectl apply -f aks-ingress-service.yml
else
  kubectl apply -f nginx-ingress-service.yml
fi

echo -e "\n$fg_bold[red]Finished deploying taktzeit$reset_color\n"
